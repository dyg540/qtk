import { Widget } from "./widget";
import { RichText } from "./rich-text";
import Events = require("../events");
/**
 * 富文本编辑器。
 */
export declare class RichTextEdit extends RichText {
    protected _element: any;
    protected _textArea: any;
    protected _keyboardX: any;
    protected _focusChar: any;
    protected _textAreaDiv: any;
    protected _keyboardSelect: number;
    protected _textAreaContent: string;
    protected _nextKeyboardX: any;
    protected _richClipboard: any;
    protected _plainClipboard: any;
    protected _selectDragStart: any;
    constructor();
    readonly inputable: boolean;
    undo(): void;
    redo(): void;
    selectAll(): void;
    setSelectedFont(value: any): void;
    getSelectedFont(): any;
    setSelectedSize(value: any): void;
    getSelectedSize(): any;
    setSelectedBold(value: any): void;
    getSelectedBold(): any;
    setSelectedItalic(value: any): void;
    getSelectedItalic(): any;
    setSelectedUnderline(value: any): void;
    getSelectedUnderline(): any;
    setSelectedStrikeout(value: any): void;
    getSelectedStrikeout(): any;
    setSelectedAlign(value: any): void;
    getSelectedAlign(): any;
    setSelectedScript(value: any): void;
    getSelectedScript(): any;
    setSelectedColor(value: any): void;
    getSelectedColor(): any;
    setSelectedFormatting(id: string, value: any): Widget;
    getSelectedFormatting(id: string): any;
    protected exhausted(ordinal: any, direction: any): boolean;
    protected differentLine(caret1: any, caret2: any): boolean;
    protected changeLine(ordinal: any, direction: any): any;
    protected endOfline(ordinal: any, direction: any): any;
    protected handleKey(key: any, selecting: any, ctrlKey: any): boolean;
    protected findNodeByEvent(evt: any): any;
    dispatchDblClick(evt: any): void;
    protected updateTextArea(): void;
    dispatchPointerDown(evt: Events.PointerEvent): void;
    dispatchPointerUp(evt: Events.PointerEvent): void;
    dispatchPointerMove(evt: Events.PointerEvent): void;
    protected onInit(): void;
    dispose(): void;
    protected focused: boolean;
    protected cachedWidth: number;
    protected cachedHeight: number;
    protected nextCaretToggle: number;
    protected updateCaret(): void;
    protected hasFocus(): boolean;
    static TYPE: string;
    private static rBin;
    static create(options?: any): RichTextEdit;
}
